% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fct_dbplyr_write.R
\name{write_for_reuse}
\alias{write_for_reuse}
\title{Write remote table for reuse}
\usage{
write_for_reuse(
  tbl_to_save,
  db_connection,
  db,
  schema,
  tbl_name,
  index_columns = NA,
  print_off = TRUE
)
}
\arguments{
\item{tbl_to_save}{an existing remote table that defines/describes the new
table to save}

\item{db_connection}{the open connection to close.
Often created using \code{create_database_connection}.}

\item{db}{the name of the database. Can be different from the database used
when creating \code{db_connection} but must be on the same server. Warns if not
delimited in square brackets.}

\item{schema}{the name of the schema containing the Table or View. Warns if
not delimited in square brackets.}

\item{tbl_name}{the name of the Table in SQL. Warns is not delimited
in square brackets.}

\item{index_columns}{an optional array containing the names of columns for
to index by. Will error if columns are not found in table.}

\item{print_off}{T/F should progress be printed to console. Defaults to TRUE.}
}
\value{
a connection to the new table (using \code{create_access_point})
}
\description{
During long or complex manipulations we may wish to write the current state
of a remote database table back to disk before we resume manipulating it.
}
\details{
\code{write_for_reuse} has been designed for this purpose. It can be inserted
into the middle of a sequence of piped dplyr commands to force a write to
disk.

Existing tables with the same name are automatically overwritten. For a more
cautious approach, use \code{write_to_database} followed by
\code{create_nonclustered_index}.
}
